
### Step 1: Create the Project Directory

Create a new directory for your project:

```bash
mkdir hello-github
cd hello-github
```

### Step 2: Create the Python Script

Inside the directory, create a file named `hello_github.py` and add the following code:

```python
# hello_github.py

def main():
    print("Hello, GitHub!")

if __name__ == "__main__":
    main()
```

### Step 3: Create a README.md File

Create a `README.md` file to describe your project:

```markdown
# Hello GitHub

This is a simple Python script that prints "Hello, GitHub!".

## How to Run

1. Clone the repository.
2. Navigate to the project directory.
3. Run the script using Python.

```bash
git clone https://github.com/yourusername/hello-github.git
cd hello-github
python hello_github.py
```
```

### Step 4: Create a .gitignore File

(Optional) Create a `.gitignore` file to exclude unnecessary files:

```
__pycache__/
*.pyc
```

### Step 5: Initialize a Git Repository

Initialize a Git repository, add your files, and make the initial commit:

```bash
git init
git add .
git commit -m "Initial commit"
```

### Step 6: Push to GitHub

1. Create a new repository on GitHub named `hello-github`.
2. Add the GitHub remote and push the changes:

```bash
git remote add origin https://github.com/yourusername/hello-github.git
git push -u origin master
```

Replace `yourusername` with your GitHub username.

### Complete Directory Structure

Your project directory should now look like this:

```
hello-github/
├── .gitignore
├── README.md
└── hello_github.py
```

### Final Python Script: `hello_github.py`

```python
# hello_github.py

def main():
    print("Hello, GitHub!")

if __name__ == "__main__":
    main()
```

### Final README.md

```markdown
# Hello GitHub

This is a simple Python script that prints "Hello, GitHub!".

## How to Run

1. Clone the repository.
2. Navigate to the project directory.
3. Run the script using Python.

```bash
git clone https://github.com/yourusername/hello-github.git
cd hello-github
python hello_github.py
```
```

### Final .gitignore

```
__pycache__/
*.pyc
```

### Summary

You've created a simple Python project and set it up for GitHub. This example covers creating a basic script, documenting it with a README, ignoring unnecessary files with `.gitignore`, and using Git to manage and push your code to GitHub.
